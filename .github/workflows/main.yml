name: Main

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  project-name: pymarkdown
  default-python-version: 3.13
  default-pipenv-version: 2025.0.3
  default-platform: windows-latest

jobs:

  matrix-prep-current:

    name: Prepare Test Matrix
    needs: [ lint ]
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    defaults:
      run:
        shell: bash

    steps:

    - name: Check out code
      uses: actions/checkout@v4

    - name: Calculate test matrix
      id: set-matrix
      run: |
        branchName=$(echo '${{ github.ref }}' | sed 's,refs/heads/,,g')
        echo "Branch Name: $branchName"
        matrix=$(jq --arg branchName "$branchName" 'map(. | select((.runOn==$branchName) or (.runOn=="current")) )' .github/workflows/matrix_includes.json)
        echo "Matrix: $matrix"
        echo "matrix={\"include\":$(echo $matrix)}" >> $GITHUB_OUTPUT

  matrix-prep-previous:

    name: Prepare Test Matrix
    needs: [ scenario-tests ]
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    defaults:
      run:
        shell: bash

    steps:

    - name: Check out code
      uses: actions/checkout@v4

    - name: Calculate test matrix
      id: set-matrix
      run: |
        branchName=$(echo '${{ github.ref }}' | sed 's,refs/heads/,,g')
        echo "Branch Name: $branchName"
        matrix=$(jq --arg branchName "$branchName" 'map(. | select((.runOn==$branchName) or (.runOn=="previous")) )' .github/workflows/matrix_includes.json)
        echo "Matrix: $matrix"
        echo "matrix={\"include\":$(echo $matrix)}" >> $GITHUB_OUTPUT

  scenario-tests:

    name: Scenario Tests
    needs: [ matrix-prep-current ]
    strategy:
      matrix: ${{fromJson(needs.matrix-prep-current.outputs.matrix)}}
    runs-on: ${{ matrix.platform }}
    timeout-minutes: ${{ matrix.timeout }}
    defaults:
      run:
        shell: bash

    steps:

      - name: Checkout Repository
        uses: actions/checkout@master

      - name: Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v5.6.0
        with:
          python-version: ${{ matrix.python }}

      - name: Install PipEnv
        run: |
          export PYTHONIOENCODING=utf-8
          pip install pipenv==${{ env.default-pipenv-version }}

      - name: Sync With Repository
        run: |
          export PYTHONIOENCODING=utf-8
          grep -v '^sourcery' Pipfile > temp
          mv temp Pipfile
          cat Pipfile
          rm Pipfile.lock
          pipenv lock --clear --python ${{ matrix.python }}
          pipenv sync -d
          pipenv graph

      - name: Execute Tests
        run: pipenv run pytest --cov-fail-under=80 --cov --cov-branch --cov-report xml:report/coverage.xml --cov-report html:report/coverage

      - name: Archive coverage artifacts
        uses: actions/upload-artifact@v4
        if: ${{ matrix.python == env.default-python-version && matrix.platform == env.default-platform }}
        with:
          name: ${{ matrix.platform }} Coverage
          path: |
            ./report/coverage.xml
            ./report/coverage

      - name: Report Coverage
        uses: codecov/codecov-action@v5
        if: ${{ matrix.python == env.default-python-version && matrix.platform == env.default-platform }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          file: ./report/coverage.xml
          name: ${{ matrix.python }} - ${{ matrix.platform }}
          fail_ci_if_error: true

  lint:

    name: Project Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 5
    defaults:
      run:
        shell: bash

    steps:

      - name: Checkout Repository
        uses: actions/checkout@master

      - name: Setup Python ${{ env.default-python-version }}
        uses: actions/setup-python@v5.6.0
        with:
          python-version: ${{ env.default-python-version }}

      - name: Install PipEnv
        run: |
          export PYTHONIOENCODING=utf-8
          pip install pipenv==${{ env.default-pipenv-version }}

      - name: Sync With Repository
        run: |
          export PYTHONIOENCODING=utf-8
          grep -v '^sourcery' Pipfile > temp
          mv temp Pipfile
          cat Pipfile
          pipenv lock --clear --python ${{ env.default-python-version }}
          pipenv sync -d
          pipenv graph

      - name: Execute Pre-Commit
        run: |
          export PYTHONIOENCODING=utf-8
          pipenv run pre-commit run --all

  expanded-scenario-tests:

    name: Extended Scenario Tests
    needs: [ matrix-prep-previous ]
    strategy:
      matrix: ${{fromJson(needs.matrix-prep-previous.outputs.matrix)}}
    runs-on: ${{ matrix.platform }}

    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v5.6.0
        with:
          python-version: ${{ matrix.python }}

      - name: Install PipEnv
        run: |
          pip install pipenv==2023.12.1

      - name: Sync With Repository
        run: |
          rm Pipfile.lock
          pipenv lock --clear --python ${{ matrix.python }}
          pipenv sync -d
          pipenv graph
          pipenv uninstall pytest-html

      - name: Execute Tests
        run: pipenv run pytest --cov-fail-under=90 --cov --cov-branch --cov-report xml:report/coverage.xml

  packaging:

    name: Package Application
    needs: [ lint, expanded-scenario-tests ]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    defaults:
      run:
        shell: bash

    steps:

      - name: Checkout Repository
        uses: actions/checkout@master

      - name: Setup Python ${{ env.default-python-version }}
        uses: actions/setup-python@v5.6.0
        with:
          python-version: ${{ env.default-python-version }}

      - name: Install PipEnv
        run: |
          export PYTHONIOENCODING=utf-8
          pip install pipenv==${{ env.default-pipenv-version }}

      - name: Sync With Repository
        run: |
          export PYTHONIOENCODING=utf-8
          grep -v '^sourcery' Pipfile > temp
          mv temp Pipfile
          cat Pipfile
          pipenv lock --clear --python ${{ env.default-python-version }}
          pipenv sync -d
          pipenv graph

      - name: Pyroma
        run: |
          export PYTHONIOENCODING=utf-8
          pipenv run pyroma -n 10 .

      - name: Setup
        run: |
          export PYTHONIOENCODING=utf-8
          pipenv run python setup.py sdist bdist_wheel

      - name: Twine
        run: |
          export PYTHONIOENCODING=utf-8
          pipenv run twine check dist/*    

      - name: Upload Package
        uses: actions/upload-artifact@v4
        with:
          name: packaged-library
          path: ${{github.workspace}}/dist/

  publish-to-testpypi:
    # See https://github.com/pypa/gh-action-pypi-publish/tree/release/v1/
    needs: [packaging]
    name: Publish Python üêç distribution üì¶ to PyPI
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    environment:
      name: pypi
      url: https://pypi.org/p/pymarkdownlnt
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-dist
        path: dist/
    - name: Publish distribution üì¶ to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
